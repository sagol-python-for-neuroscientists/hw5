from typing import Union 
from typing import Tuple 
import pandas as pd
import matplotlib.pyplot as plt
import json
import numpy as np
import pathlib

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if data_fname is str:
            self.data_fname = str
        if not pathlib.Path(data_fname).exists():
            raise ValueError("File not found!")
        else:
            self.data_fname = pathlib.Path(data_fname)
        self.data = pd.DataFrame()

    def read_data(self) -> pd.DataFrame:
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        return self.data

    def show_age_distrib(self)-> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
            """
        array= np.array (self.read_data().loc[:,'age'].values)
        # Define bin edges
        bin_edges = list(range(0, 101, 10))
        # Plotting the histogram
        hist, bins, _= plt.hist(array, bin_edges, edgecolor='black')
        # Setting labels and title
        plt.xlabel('Age')
        plt.ylabel('Count')
        plt.title("Participant's Age Distribution")
        # Displaying the histogram
        plt.show()
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        def is_valid_email (email) -> bool:
            if email.count('@') != 1 or email.startswith('@') or email.endswith('@'):
                return False
            if email.count('.') == 0 or email.startswith('.') or email.endswith('.'):
                return False
            if email[email.index('@') + 1] == '.':
                return False
            if not email.endswith('.com'):
                return False
            return True

        # Filter the DataFrame to keep rows with valid emails
        df=self.data
        df = df[df['email'].apply(is_valid_email)]
        df = df.reset_index(drop=True)
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        
        # Function to replace NaN values with average per row
        def replace_nan (row):
            if row[['q1','q2','q3','q4','q5']].isna().any():
                row[row.isna()] = average[row.name]
                indices_replaced.append(row.name)
            return row

        df=self.data
        indices_replaced = []
        # Calculate the average per row for columns 7, 8, 9, 10, 11
        average = df[['q1','q2','q3','q4','q5']].mean(axis=1)
        # Apply the function to each row of the DataFrame and place it in a new DataFrame
        df = df.apply(replace_nan, axis=1)
        arr=np.array(indices_replaced)
        return (df, arr)
  

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        
        def calculate_condition(row):
            if row[['q1','q2','q3','q4','q5']].isnull().sum() > maximal_nans_per_sub:
               return np.nan 
            else:
                return average_int[row.name]
            
        
        df=self.data
        average = df[['q1','q2','q3','q4','q5']].mean(axis=1)
        average_int = average.astype(int)
        df['score'] = df.apply(calculate_condition, axis=1)
        df['score'] = df['score'].astype('UInt8')
        return df        






