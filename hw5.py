import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pathlib
from typing import Union, Tuple


def valid_email(email):
    email_splt = email.split('@')
    if len(email_splt) != 2:
        return False
    if len(email_splt[0]) == 0 or len(email_splt[1]) == 0:
        return False
    if email_splt[0][0] == '.' or email_splt[1][0] == '.' or email_splt[1][-1] == '.':
        return False
    if '.' not in email_splt[1]:
        return False
    return True

# TODO: should the changes be in place?
class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        assert isinstance(data_fname, pathlib.Path) or isinstance(data_fname, str)
        self.data_fname = data_fname if isinstance(data_fname, pathlib.Path) else pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError("file does not exist")
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        bins = np.linspace(start=0, stop=100, num=10 + 1, endpoint=True)
        _, ax = plt.subplots()
        hist, _, _ = ax.hist(self.data.age, bins=bins)
        ax.set_xlabel("age")
        ax.set_ylabel("occurances")
        ax.set_title("age distribution")
        ax.set_xticks(bins)
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        mask = self.data.email.apply(lambda email: valid_email(email))
        df = self.data[mask].reset_index(drop=True)
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        questions = ['q1', 'q2', 'q3', 'q4', 'q5']

        is_nan = self.data[questions].isnull()
        arr_mask = is_nan.any(axis=1)
        arr = self.data[arr_mask].index

        q_mean = self.data[questions].mean(axis=1)

        df = self.data.copy()
        df[questions] = df[questions].where(df[questions].notnull(), q_mean, axis=0)

        return df, arr

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        questions = ['q1', 'q2', 'q3', 'q4', 'q5']
        df = self.data.copy()
        na_c = df[questions].isnull().sum(axis=1)
        q_mean = df[questions].mean(axis=1).astype("uint8").astype("UInt8")
        arr_mask = na_c > maximal_nans_per_sub
        q_mean[arr_mask] = np.nan
        df["score"] = q_mean

        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        questions = ['q1', 'q2', 'q3', 'q4', 'q5']

        df = self.data.copy()
        df = df[df.age.notna()]  # remove rows with none age

        df = df.set_index(['gender', 'age'], append=True)  # create multi-index

        groups = df.groupby([None, lambda x: x > 40], level=[1, 2])

        new_df = groups[questions].mean()

        return new_df
