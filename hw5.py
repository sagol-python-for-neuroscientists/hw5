from typing import Union, Tuple
import pathlib
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if pathlib.Path(data_fname).exists():
            self.data_fname = pathlib.Path(data_fname)
            self.data = None
        else:
            raise ValueError("Path Does Not Exist")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
        return

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """
        bins = np.arange(0, 101, 10)
        data = self.data.copy()

        # plot a histogram of "age" column
        self.my_hist(data['age'], bins)

        # return the said values
        data['age_binned'] = pd.cut(data['age'], bins, right=False)
        age_grps = data.groupby(["age_binned"], sort=True).count()  # count automatically ignores NaNs
        age_grps["ind"] = age_grps.index
        age_cnt = age_grps["age"].values
        return age_cnt, bins

    def my_hist(self, plt_arr, bin_ticks):
        plt.hist(plt_arr, bins=bin_ticks)
        plt.xlim(0, 100)
        plt.xticks(bin_ticks)
        plt.xlabel('Age Group')
        plt.ylabel('Number of People')
        plt.title('Age Distribution')
        plt.show()
        return

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """
        orig = self.data.copy()
        df = orig[orig['email'].str.contains(r'[^@]+@[^@]+\.[^@]+')].reset_index(drop=True)
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        questions = self.data[cols].copy()
        # find rows with empty questions
        qs_na = pd.isnull(questions).any(1)
        qs_na = qs_na[qs_na].index.values  # get the indices only where True
        # calculate mean of the relevant columns only
        questions['mean'] = questions.mean(axis=1)
        self.data['mean'] = questions['mean']
        # fill NaN with mean
        for col in cols:
            self.data[col] = self.data[col].fillna(value=self.data['mean'])
        self.data = self.data.drop('mean', 1)
        return self.data, qs_na

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        questions = self.data[cols].copy()
        self.data['mean'] = questions.mean(axis=1)
        self.data['nans'] = questions.isnull().sum(axis=1)
        self.data['score'] = np.where(self.data['nans'] <= maximal_nans_per_sub,
                                      self.data['mean'].astype(int), np.nan).tolist()
        self.data['score'] = self.data['score'].astype("UInt8")
        self.data = self.data.drop(['mean', 'nans'], 1)
        return self.data

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
        cols = ['q1', 'q2', 'q3', 'q4', 'q5']
        ### I added the following line because when not filling NaNs with a value
        ### above 40, the resulting df ignores them in the mean, and the result is != the test df.
        #self.data['age'] = self.data['age'].fillna(value=41)
        self.data = self.data[self.data['age'].notna()]
        self.data['above_40'] = self.data['age'] > 40
        # part A
        self.data.reset_index(inplace=True)
        self.data = self.data.set_index(['gender', 'age'], append=True)
        # part B
        self.data = self.data.set_index(['above_40'], append=True)
        data_by_age_cat = self.data.mean(level=["gender", "above_40"])[cols]
        data_by_age_cat.index.names = ['gender', 'age']
        return data_by_age_cat.sort_index()
