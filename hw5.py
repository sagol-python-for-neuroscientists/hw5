import json
import pathlib
from typing import Union, Tuple
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data = None
        if not pathlib.Path(data_fname).is_file():
            raise ValueError()
        self.data_fname = pathlib.Path(data_fname)

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns:
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
        """
        hist, bins, _ = plt.hist(self.data["age"], np.arange(0, 101, 10))
        plt.xlabel("Age")
        plt.ylabel("Frequency")
        plt.title("Age Distribution")
        plt.show()

        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails and removes them.

        Returns:
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index reset.
        """
        new_df = self.data.copy()

        mask = new_df["email"].str.match(r'^[^@\s]+@[^@\s]+\.[^@\s]+$')

        return new_df[mask].reset_index(drop=True)

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions and replaces that missing value with the mean of the
        other grades for that student.

        Returns:
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade.
        arr : np.ndarray
            Row indices of the students whose new grades were generated.
        """

        qs = ['q1', 'q2', 'q3', 'q4', 'q5']
        missing = self.data[qs].isna().any(axis=1)

        mean_grades = self.data[qs].mean(axis=1)

        self.data[qs] = self.data[qs].fillna(mean_grades, axis=0)

        return self.data, np.where(missing)[0]

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        question_columns = ['q1', 'q2', 'q3', 'q4', 'q5']
        self.data['score'] = np.floor(self.data[question_columns].mean(axis=1))

        mask = self.data[question_columns].isnull().sum(axis=1) > maximal_nans_per_sub
        self.data.loc[mask, 'score'] = np.nan
        self.data['score'] = self.data['score'].astype('UInt8')

        return self.data

    def correlate_gender_age(self) -> pd.DataFrame:
        clean_data = self.data.dropna(subset=["age", "gender"])
        clean_data["gender"] = clean_data["gender"].astype(str)
        result = clean_data.groupby(["gender", (clean_data["age"] > 40)])[
            ["q1", "q2", "q3", "q4", "q5"]
        ].mean()
        result.index.names = ["gender", "age"]
        result.sort_index(inplace=True)
        return result