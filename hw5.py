import pathlib
from pathlib import Path
from typing import Tuple, Union
import pandas as pd
import pytest
import json
import numpy as np
from matplotlib import pyplot as plt 


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        print("__init__")
        self._verify_fname(data_fname)  # raises exception if bad fname
        self.data_fname = Path(str(data_fname))
        self.data = None
            
    def __str__(self) -> str:
        print("__str__")
        return f"QuestionnaireAnalysis: fname='{self.fname}', data={self.data}"

    def _verify_fname(self, data_fname):
        """ Verify the filename"""        
        print(f"_verify_fname, data_fname='{data_fname}'")
        data_fname = Path(str(data_fname))
        if not data_fname.exists():
            raise ValueError("the file does not exist")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        print("read_data")
        with self.data_fname.open(encoding="UTF-8") as source:
            self.data = json.load(source)

# Q1
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
        Returns
        -------
        hist : np.ndarray
        Number of people in a given bin
        bins : np.ndarray
        Bin edges
        """
        print("show_age_distrib")
        ages = []
        for participant_i in self.data:
            age = participant_i["age"]
            if type(age) == int:
                ages.append(age)
        hist, bins, _ = plt.hist(ages, bins=[0,10,20,30,40,50,60,70,80,90,100])
        # plt.show()
        return hist, bins

#Q2
    def validate_mail(self, email):
        """
        Contains exactly one "@" sign, but doesn't start or end with it.
        Contains a "." sign, but doesn't start or end with it.
        The letter following the "@" sign (i.e, appears after it) must not be ".".
        """
        return email.count("@") == 1 \
            and "." in email \
            and email[0] != "@" \
            and email[0] != "." \
            and email[-1] != "@" \
            and email[-1] != "." \
            and email[email.find("@") + 1] != "."


    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.
        
        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        filtered = [participant for participant in self.data if self.validate_mail(participant["email"])]
        df = pd.DataFrame(data=filtered)
        return df

    
if __name__ == '__main__':
    print("Question 1")
    filepath = r"C:\Users\Shaked Turk\OneDrive\Desktop\python_for_neuroscience\hw5\data.json"
    a = QuestionnaireAnalysis(data_fname=filepath)
    a.read_data()
    hist, bins = a.show_age_distrib()
    print(f"hist={hist}")
    print(f"\nbins={bins}")
    print(a.remove_rows_without_mail())



  