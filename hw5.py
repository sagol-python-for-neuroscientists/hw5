import json
import numpy as np
import matplotlib.pyplot as plt
from typing import Tuple, Union, Dict
import pandas as pd
import pathlib
import re
from pandas.api.types import is_numeric_dtype


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        """Constructor of the class.
        self.data_fname should be set to the input argument data_fname.
        self.data should be set to None.
        """
        self.data_fname = pathlib.Path(data_fname)
        if not self.data_fname.exists():
            raise ValueError("File does not exist")
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname, 'r') as f:
            data: Dict = json.load(f)
        self.data = pd.DataFrame(data, columns=['id', 'first_name', 'last_name', 'email', 'timestamp', 'age', 'gender', 'q1', 'q2', 'q3', 'q4', 'q5'])
        print(self.data)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
          Number of people in a given bin
        bins : np.ndarray
          Bin edges
            """
        if self.data is None:
            raise ValueError("Data not read yet")
        ages = self.data['age']
        ages = list(filter(lambda x: x != 'nan', ages))
        hist, bins = np.histogram(ages, bins=range(0, 101, 10))
        return hist, bins

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.
        A valid email address is one that follows these conditions:
        Contains exactly one "@" sign, but doesn't start or end with it.
        Contains a "." sign, but doesn't start or end with it.
        The letter following the "@" sign (i.e, appears after it) must not be "."
    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """

        if self.data is None:
            raise ValueError("Data not read yet")

        # Create a copy of the data
        df = pd.DataFrame(self.data)
        # Find the rows with invalid emails
        invalid_emails = df['email'].apply(lambda x: not re.match(r"[^@]+@[^@]+\.[^@]+", x))
        # Remove the rows with invalid emails
        df = df[~invalid_emails]
        # Reset the index
        df.reset_index(drop=True, inplace=True)

        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.
        Write a method that works on the original DataFrame (in self.data),
        replaces the missing values with the mean for that subject in the other questions and returns the corrected
        DataFrame as well as a np.array of the indices of the rows that were corrected.

        Returns
        -------
        df : pd.DataFrame
          The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
              Row indices of the students that their new grades were generated
            """

        if self.data is None:
            raise ValueError("No data has been read.")

        df = pd.DataFrame(self.data)
        df.replace('nan', np.nan, inplace=True)
        missing_values = df[['q1', 'q2', 'q3', 'q4', 'q5']].isnull().any(axis=1)
        missing_values_indices = [i for i, x in enumerate(missing_values) if x]
        mean = df[['q1', 'q2', 'q3', 'q4', 'q5']].mean(axis=1)
        df[['q1', 'q2', 'q3', 'q4', 'q5']] = df[['q1', 'q2', 'q3', 'q4', 'q5']].fillna(mean, axis=0)



        return df, missing_values_indices


    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        if self.data is None:
            raise ValueError("Data not read yet")
        df = pd.DataFrame(self.data)
        df.replace('nan', np.nan, inplace=True)
        indexes_that_should_be_null = self.data[['q1', 'q2', 'q3', 'q4', 'q5']].isnull().sum(axis=1) > maximal_nans_per_sub
        df['score'] = df[['q1', 'q2', 'q3', 'q4', 'q5']].mean(axis=1)
        df['score'] = df['score'].apply(lambda x: np.floor(x))
        df['score'] = df['score'].astype('UInt8')
        df.loc[indexes_that_should_be_null, 'score'] = np.nan

        return df