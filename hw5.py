import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from typing import Tuple
from pathlib import Path
from typing import Union


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[Path, str]):
        self.data_fname = Path(data_fname)
        if not Path(data_fname).is_file():
            raise ValueError("Invalid file name or file does not exist.")
        self.data = None

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        with open(self.data_fname) as file:
            data = json.load(file)
        self.data = pd.DataFrame(data)
        self.data['age'] = self.data['age'].replace('nan', -1).astype(int)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        ages = self.data['age'].values
        bins = np.arange(0, 101, 10)
        hist, bin_edges = np.histogram(ages, bins=bins)

        bin_centers = bin_edges[:-1] + np.diff(bin_edges) / 2
        hist = np.clip(hist, 0, None)

        plt.bar(bin_centers, hist, width=10)
        plt.xlabel("Age")
        plt.ylabel("Count")
        plt.title("Distribution of Participant Ages")
        plt.xticks(bins)
        plt.grid(True)
        plt.show()

        return hist, bin_edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails and removes them

        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e., the same table but with the erroneous rows removed and
            the (ordinal) index reset.
        """
        df = pd.DataFrame(self.data)
        rows_to_drop = []

        for i, email in enumerate(df['email']):
            if (
                email.count('@') != 1 or
                '.' not in email or
                email.startswith('@') or
                email.endswith('@') or
                email.startswith('.') or
                email.endswith('.') or
                email.split('@')[-1].startswith('.') or
                email.split('@')[-1].endswith('.')
            ):
                rows_to_drop.append(i)

        df = df.drop(rows_to_drop).reset_index(drop=True)
        return df

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        df = pd.DataFrame(self.data)
        q_cols = df.columns[df.columns.str.startswith('q')]
        rows_with_missing_grades = []

        for col in q_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce').astype(float)

            for row in range(len(df)):
                if pd.isna(df[col][row]):
                    rows_with_missing_grades.append(row)
                    values = df.loc[row, q_cols].values
                    values = pd.to_numeric(values, errors='coerce')
                    values = values[~pd.isna(values)]
                    mean_grade = np.mean(values) if len(values) > 0 else np.nan
                    df.loc[row, col] = mean_grade

        rows_with_missing_grades = sorted(list(set(rows_with_missing_grades)))
        return df, np.array(rows_with_missing_grades)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df = pd.DataFrame(self.data)
        df = df.assign(score=np.nan)
        q_cols = df.columns[df.columns.str.startswith('q')]

        for col in q_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce').astype(float)

            for row in range(len(df)):
                values = df.loc[row, q_cols].values
                values = pd.to_numeric(values, errors='coerce')
                count_nans = np.count_nonzero(np.isnan(values))

                if count_nans <= maximal_nans_per_sub:
                    values = values[~pd.isna(values)]
                    mean_grade = np.floor(np.mean(values)).astype('uint8')
                else:
                    mean_grade = np.nan

                df.loc[row, 'score'] = mean_grade

        df = df.astype({'score': 'UInt8'})
        return df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        df = pd.DataFrame(self.data)
        df = df[df['age'] >= 0]
        df['age'] = np.where(df['age'] > 40, True, False)
        df = df.set_index(['gender', 'age'])
        for question in ['q1', 'q2', 'q3', 'q4', 'q5']:
            df[question] = pd.to_numeric(df[question], errors='coerce')
        correlation = df.groupby(['gender', 'age'])[['q1', 'q2', 'q3', 'q4', 'q5']].mean()
        return correlation


data_file = "data.json"
analysis = QuestionnaireAnalysis(data_file)
