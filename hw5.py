from typing import Union
import pathlib
import json
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pathlib import Path


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if Path(data_fname).exists(): #if path exists in directory
            self.data_fname=Path(data_fname)
        else:
            raise ValueError("Invalid path type")
        # the self init recieves an str or pathlib name for data_fname

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data=pd.read_json(self.data_fname) 
        # the method attirbutes a json file to this class's case properties as its data
        return self.data



    def show_age_distrib(self) -> tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
            """
            
        ages=self.data.iloc[:]['age'] #takes the age value from each line in the data
        ages=ages.dropna() #removes NaN age values                
        hist=plt.hist(ages, bins=10, range=(0,100), edgecolor='black')
        plt.xlim(0, 100)
        plt.xticks(np.arange(0, 101, 10)) #array from 0 to 100 with jumps of 10
        #plt.show()
        return hist
        
    
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
            """
        email_ser=q.data.iloc[:]['email']
        for ind, value in email_ser.items():
            if (value.count('@') == 1 and '.' in value and not value.startswith('@') and not value.endswith('@')
                and not value.startswith('.') and not value.endswith('.') and value.find('@') != value.find('.')-1 
            ):
                continue
            else:
                self.data=self.data.drop(index=ind) #taking out lines with wrong emails
        self.data = self.data.reset_index(drop=True) #fixing the number of lines
        return self.data
    
    
    def fill_na_with_mean(self) -> tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
       all questions, and replaces that missing value with the mean of the
       other grades for that student.

        Returns
        -------
         df : pd.DataFrame
         The corrected DataFrame after insertion of the mean grade
         arr : np.ndarray
         Row indices of the students that their new grades were generated
        """

        grades = self.data[['q1', 'q2', 'q3', 'q4', 'q5']]
        MeanGrade=grades.mean(axis=1, skipna=True)
        changed_rows = np.array([])
        
        for index, row in grades.iterrows():
            original_row = row.copy()  # Make a copy of the original row
            grades.loc[index] = row.fillna(MeanGrade[index])
            if not original_row.equals(grades.loc[index]):
                changed_rows=np.append(changed_rows, index)
        self.data[['q1', 'q2', 'q3', 'q4', 'q5']]=grades[['q1', 'q2', 'q3', 'q4', 'q5']]
        rows=changed_rows.astype(np.int64)
        results = (self.data, rows)
        print(type(results))
        return results
          

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        #if I wanted to loop it:
        #for i in range(len(self.data)):    
        #   if self.data.iloc[i][['q1', 'q2', 'q3', 'q4', 'q5']].isna().sum()>1:
        #      self.data.loc[i,'Score'] = np.nan
                                  
        self.data['score']=self.data[['q1', 'q2', 'q3', 'q4', 'q5']].mean(axis=1, skipna=True) #creats new column with mean of grades       
        self.data['score']=np.floor(self.data['score']).astype(pd.UInt8Dtype()) #rounds the mean grades and turns into int
        boolean_for_nan=self.data[['q1', 'q2', 'q3', 'q4', 'q5']].isna().sum(axis=1)>maximal_nans_per_sub #creates a boolean for each row of whether the row has more than one NaN grade
        #print(boolean_for_nan[-20:-1])
        self.data.loc[boolean_for_nan,'score']=np.nan   #changes the Scores column grade of the found rows to NaN 
        #print(self.data['score'].dtype)
        return self.data
       

    #def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
        """

        # Reset the index to create the ordinal index as a column
        #self.data.reset_index(inplace=True)

        # Set the index to a MultiIndex with three levels: ordinal index, gender, and age
        #self.data.set_index(['index', 'gender', 'age'], inplace=True)
        #gender=self.data.groupby('gender')
        #age_above_40 = self.data.index.get_level_values('age')>40
        #age_group=self.data.groupby(age_above_40)
        
        #print(self.data.index('age'))
        #boolean_for_age=self.data[['age']]>40 #creates a boolean for each row of whether the row has more than one NaN grade
        #for group_name, group_df in gender:
        #    print(f"Group: {group_name}")
         #   print(group_df)
         #   print()


q= QuestionnaireAnalysis('data.json')
q.read_data()
#q.score_subjects()






