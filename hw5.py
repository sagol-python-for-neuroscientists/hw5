import pathlib
import pandas as pd
from typing import Union, Tuple
import numpy as np
import matplotlib.pyplot as plt
import re


class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
        except TypeError:
            print("The file name needs to be a string or a pathlib path")

        if not self.data_fname.is_file():
            raise ValueError("The file does not exists, check directory ")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.

    Returns
    -------
    hist : np.ndarray
      Number of people in a given bin
    bins : np.ndarray
      Bin edges
        """

        _, ax = plt.subplots()
        bin_count, edges, _ = ax.hist(self.data['age'], bins=np.arange(0, 110, 10))
        ax.set_xlabel('age')
        ax.set_ylabel('counts')
        ax.set_title('age distribution')
        plt.show()
        return bin_count, edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.

    Returns
    -------
    df : pd.DataFrame
      A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
      the (ordinal) index after a reset.
        """
        regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9-]+\.[A-Z|a-z]{1,}\b'
        return self.data[self.data.email.str.match(regex)].reset_index(drop=True)

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

    Returns
    -------
    df : pd.DataFrame
      The corrected DataFrame after insertion of the mean grade
    arr : np.ndarray
          Row indices of the students that their new grades were generated
        """
        # copy of data
        corrected_df = self.data.copy()
        # finding null indexes
        null_idx = pd.isnull(self.data[['q1', 'q2', 'q3', 'q4', 'q5']]).any(1).to_numpy().nonzero()[0]
        # filing section with mean value of row
        new = self.data[['q1', 'q2', 'q3', 'q4', 'q5']].apply(lambda row: round(row.fillna(row.mean()), 1), axis=1)
        # adding corrected section to data
        corrected_df[['q1', 'q2', 'q3', 'q4', 'q5']] = new

        return corrected_df, null_idx

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        df_score = self.data
        # adding mean score column of type int
        df_score['score'] = df_score[['q1', 'q2', 'q3', 'q4', 'q5']].mean(axis=1).astype("uint8").astype("UInt8")

        # checking threshold and placing NA
        idx = df_score[['q1', 'q2', 'q3', 'q4', 'q5']].isnull().sum(axis=1) > maximal_nans_per_sub
        df_score.loc[idx, 'score'] = pd.NA
        return df_score

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

    Returns
    -------
    pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
    """
        # dropping rows with no age info
        data = self.data.dropna(axis = 0, subset='age')
        # setting multiindex

        data = data.set_index(['gender', 'age'], append=True)
        group_by_data = data.groupby([None, lambda x: x > 40], level=[1, 2]).mean()
        return group_by_data.loc[:, "q1":"q5"]

