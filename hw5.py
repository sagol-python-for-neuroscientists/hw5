from typing import Union, Tuple

import pathlib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


class QuestionnaireAnalysis:
    """Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        try:
            self.data_fname = pathlib.Path(data_fname).resolve()
        except TypeError:
            print(
                "ERROR: Please supply a string or a pathlib.Path instance to the class."
            )
            raise
        if not self.data_fname.exists():
            raise ValueError(f"File {str(self.data_fname)} doesn't exist.")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)

    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
        Returns
        -------
        hist : np.ndarray
            Number of people in a given bin
        bins : np.ndarray
            Bin edges
        """
        bins = np.linspace(0, 100, 11)
        _, ax = plt.subplots()
        hist, edges, _ = ax.hist(self.data["age"], bins=bins)
        ax.set_xlabel("Age")
        ax.set_ylabel("Counts")
        ax.set_title("Age of subjects")
        return hist, edges

    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.
        Returns
        -------
        df : pd.DataFrame
            A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
            the (ordinal) index after a reset.
        """
        valid_email = self.data["email"].apply(lambda x: self.validate_email(x))
        return self.data.loc[valid_email].reset_index(drop=True)

    def validate_email(self, email: str) -> bool:
        
        return (
            ("@" in email)
            and ("." in email)
            and (not email.endswith("."))
            and (not email.endswith("@"))
            and (not email.startswith("."))
            and (not email.startswith("@"))
            and (email.isascii())
            and (email.count("@") == 1)
            and (email[email.find("@") + 1] != ".")
        )



    def replace_na_with_mean(self) -> pd.DataFrame:
        """Fills the dataframe with means instead of NAs.
        To generate the corrected DF we'll construct an identically-sized DF
        that contains only the means per students, and we'll use the "where"
        method to swap the NA values with the values from the "means" DataFrame.
        Returns
        -------
        pd.DataFrame
            DF with the mean of the row instead of the NA value
        """
        only_grades = self.data.loc[:, "q1":"q5"]
        only_means = only_grades.mean(axis=1)
        only_means = pd.DataFrame({key: only_means for key in only_grades.columns})
        only_grades = only_grades.where(only_grades.notnull(), only_means)
        return only_grades

    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.
        Returns
        -------
        df : pd.DataFrame
            The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
            Row indices of the students that their new grades were generated
        """
        only_grades = self.data.loc[:, "q1":"q5"]
        rows_with_na = only_grades.loc[
            only_grades.isna().any(axis=1)
        ].index.to_numpy()
    
        only_grades = self.replace_na_with_mean()
        updated_data = self.data.copy()
        updated_data.loc[:, "q1":"q5"] = only_grades
        return updated_data, rows_with_na

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.
        
        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score should be 'UInt8', and the floating point raw numbers should be
        rounded down before the conversion.
        
        Parameters
        ----------
        maximal_nans_per_sub : int, optional
            Number of allowed NaNs per subject before giving a NA score.
        Returns
        -------
        pd.DataFrame
            A new DF with a new column - "score".
        """
        
        question_columns = self.data.loc[:, "q1":"q5"]
        self.data["score"] = (
            question_columns.mean(axis=1).astype("uint8").astype("UInt8")
        )
        more_than_maximal_nans_row_indices = (
            question_columns.isna().sum(axis=1) > maximal_nans_per_sub
        )
        self.data.loc[more_than_maximal_nans_row_indices, "score"] = pd.NA
        return self.data

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.
        
        Returns
        -------
        pd.DataFrame
            A DataFrame with a MultiIndex containing the gender and whether the subject is above
            40 years of age, and the average score in each of the five questions.
        """
        
        new_data = self.data.dropna(axis=0, subset=["age"]).set_index(
            ["gender", "age"], append=True
        )
        grps = new_data.groupby([None, lambda x: x > 40], level=[1, 2])
        return grps.mean().loc[:, "q1":"q5"]