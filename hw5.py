import pathlib
import pandas as pd
from typing import Union, Tuple
from matplotlib import pyplot as plt
import numpy as np
import json

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        if not self.data_fname.exists():
           raise ValueError("File does not exist.")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
    
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
        Returns
        -------
        hist : np.ndarray
           Number of people in a given bin
        bins : np.ndarray
           Bin edges
        """
        bin_edges = list(range(0, 101, 10))
        hist, bins, _ = plt.hist(self.data["age"], bins = bin_edges)
        #plt.show()
        
        return (hist, bins)
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.
        Returns
        -------
        df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
        """
        self.data['correct email'] = False
        for idx, mail in self.data['email'].items():
            if mail.count('@') == 1 and not mail.startswith('@') and not mail.endswith('@'):
               if '.' in mail and not mail.startswith('.') and not mail.endswith('.'):
                  if '@.' not in mail:
                     self.data.at[idx, 'correct email'] = True

        new_data = self.data[self.data['correct email'] == True]
        new_data.reset_index(drop=True, inplace=True)
    
        return new_data
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
        """Finds, in the original DataFrame, the subjects that didn't answer
        all questions, and replaces that missing value with the mean of the
        other grades for that student.

        Returns
        -------
        df : pd.DataFrame
             The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
             Row indices of the students that their new grades were generated
        """
        df_q = self.data.loc[:, 'q1':'q5']
        df_new_q = df_q.apply(lambda row: row.fillna(row.mean()), axis = 1)
        df = self.data.copy()
        df.loc[:, 'q1':'q5'] = df_new_q
        
        arr = np.where(df_q.isna().any(axis=1))[0]

        return (df, arr)

    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
        """Calculates the average score of a subject and adds a new "score" column
        with it.

        If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
        score should be NA. Otherwise, the score is simply the mean of the other grades.
        The datatype of score is UInt8, and the floating point raw numbers should be
        rounded down.

        Parameters
        ----------
        maximal_nans_per_sub : int, optional
        Number of allowed NaNs per subject before giving a NA score.

        Returns
        -------
        pd.DataFrame
        A new DF with a new column - "score".
        """
        df_q = self.data.loc[:, 'q1':'q5']
        score = df_q.mean(axis = 1)
        NA_index = df_q.count(axis = 1) < (5- maximal_nans_per_sub)
        score[NA_index] = np.nan
        
        score = np.floor(score).astype('UInt8')
        new_df = self.data.copy()
        new_df['score'] = score

        return new_df

    def correlate_gender_age(self) -> pd.DataFrame:
        """Looks for a correlation between the gender of the subject, their age
        and the score for all five questions.

        Returns
        -------
        pd.DataFrame
        A DataFrame with a MultiIndex containing the gender and whether the subject is above
        40 years of age, and the average score in each of the five questions.
        """

        # a. Use the original DataFrame and transform its index into a MultiIndex
        self.data['row_number'] = self.data.index
        self.data.reset_index(drop = True, inplace=True)
        self.data['age'] = pd.to_numeric(self.data['age'])
        self.data['gender'] = self.data['gender'].astype(str)

        self.data.set_index(['row_number','gender', 'age'], inplace=True)
        self.data.index.set_names(['gender', 'row_number', 'age'], inplace=True)
        # It's not perfect but it's the best i've got
        
        # b. Allocate the different subjects into groups based on two parameters
        groups = self.data.groupby(['gender', self.data.index.get_level_values('age') > 40])

        # c. Return the DataFrame containing the average result per question per group
        groups_df = groups[['q1', 'q2', 'q3', 'q4', 'q5']].mean()

        return groups_df
    
if __name__ == 'main':
   q = QuestionnaireAnalysis('data.json')