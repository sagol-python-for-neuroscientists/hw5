from typing import Union, Tuple
import pathlib
import pandas as pd
import json
import numpy as np
import matplotlib.pyplot as plt

def check_email(email: str) -> bool :
    if type(email) == str :
         if email.count("@") == 1 and email.count(".") >= 1:
            if email[0] != ("@" or ".") and email[-1] != ("." or "@"):
                if email[email.index("@") + 1] != ".":
                    return True
    return False

def is_NaN_values(df: pd.DataFrame) -> np.array :
    rows_with_nan = df[df[['q1','q2','q3','q4','q5']].isnull().any(axis=1)]
    indices = rows_with_nan.index

    return np.array(indices)

def count_NaN_values(df: pd.DataFrame) -> pd.Series :
    how_many = df[['q1','q2','q3','q4','q5']].isnull().sum(axis=1)

    return np.array(how_many)

def age_group(age):
    if age >= 40:
        return True
    elif age < 40 :
        return False

class QuestionnaireAnalysis:    
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        self.data_fname = pathlib.Path(data_fname)
        
        if self.data_fname.is_file() == False :
            raise ValueError("No such file")

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname.name)
        return self.data
    
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
        """Calculates and plots the age distribution of the participants.
    Returns
    -------
        hist : np.ndarray
     Number of people in a given bin
        bins : np.ndarray
     Bin edges
        """
        age = self.read_data()['age']
        age_clean = age.dropna()
        his = np.histogram(age_clean, bins = [0,10,20,30,40,50,60,70,80,90,100])
        plt.hist(age_clean, edgecolor = 'black')
        plt.title("Distribution of participants ages")
        plt.xlabel("Age")
        plt.ylabel("Frequency")
        plt.show()
        return his
    
    def remove_rows_without_mail(self) -> pd.DataFrame:
        """Checks self.data for rows with invalid emails, and removes them.
    Returns
    -------
        df : pd.DataFrame
    A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
    the (ordinal) index after a reset.
        """
        df = self.read_data()
        df = self.data
        df_clean = df[df['email'].apply(check_email) == True]
        df_clean.reset_index(drop=True, inplace=True)
        return df_clean
    
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
       """Finds, in the original DataFrame, the subjects that didn't answer
       all questions, and replaces that missing value with the mean of the
       other grades for that student.

    Returns
    -------
        df : pd.DataFrame
    The corrected DataFrame after insertion of the mean grade
        arr : np.ndarray
    Row indices of the students that their new grades were generated
       """
       self.read_data()
       df = self.data
       indices = is_NaN_values(df)
       columns = ['q1','q2','q3','q4','q5']
       mean = df[columns].mean()
       df[columns] = df[columns].fillna(mean)
       self.data = df
       
       return df, indices
    
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
       """Calculates the average score of a subject and adds a new "score" column
       with it.

       If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
       score should be NA. Otherwise, the score is simply the mean of the other grades.
       The datatype of score is UInt8, and the floating point raw numbers should be
       rounded down.

       Parameters
       ----------
       maximal_nans_per_sub : int, optional
           Number of allowed NaNs per subject before giving a NA score.

       Returns
       -------
       pd.DataFrame
           A new DF with a new column - "score".
       """
       self.read_data()
       df = self.data
       columns = ['q1','q2','q3','q4','q5']
       how_many = count_NaN_values(df)  
       mean = df[columns].mean(axis=1)
       mean_f = np.floor(mean).astype('UInt8')
       condition_t = how_many > maximal_nans_per_sub
       mean_f[condition_t] = pd.NA
       condition_f = how_many <= maximal_nans_per_sub
       mean_f[condition_f]= mean_f.astype('UInt8')
       df['score'] = mean_f
           
       return df
    
    def correlate_gender_age(self) -> pd.DataFrame:
       """Looks for a correlation between the gender of the subject, their age
       and the score for all five questions.

   Returns
   -------
   pd.DataFrame
       A DataFrame with a MultiIndex containing the gender and whether the subject is above
       40 years of age, and the average score in each of the five questions.
   """
       self.read_data()
       df = self.data
       df['age'] = df['age'].apply(age_group)
       df_corr = df.pivot_table(index=['gender', 'age'],  values=['q1','q2','q3','q4','q5'])
       
       return df_corr
        